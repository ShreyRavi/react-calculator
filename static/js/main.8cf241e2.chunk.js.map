{"version":3,"sources":["components/Display.js","components/Keypad.js","components/ReactCalculator.js","App.js","serviceWorker.js","index.js"],"names":["styles","makeStyles","t","root","width","textAlign","display","Display","content","css","className","TextField","InputProps","readOnly","variant","value","Keypad","updateContent","showingResult","setShowingResult","save","ac","help","handleKeyPress","keyID","manipulatedFloat","parseFloat","isNaN","toString","includes","manipulatedContent","console","log","Grid","container","item","xs","Button","onClick","color","ReactCalculator","useState","displayContent","setDisplayContent","NaN","calculation","setCalculation","calculate","result","newCalculation","e","direction","justify","alignItems","operator","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8cf241e2.chunk.js","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst styles = makeStyles(t => ({\n    root: {\n        '& .MuiTextField-root': {\n            width: 255,\n            textAlign: 'right',\n        },\n        textAlign: 'right',\n    },\n    display: {\n        textAlign: 'right',\n    },\n}));\n\nconst Display = ({content}) => {\n    const css = styles();\n    return(\n        <div className={css.root}>\n            <TextField \n            InputProps={{readOnly: true,}} \n            className={css.display} \n            variant=\"outlined\" value={content}>\n            </TextField>\n        </div>\n    );\n}\n\nexport default Display;","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\nconst Keypad = (\n    {\n        content, \n        updateContent,\n        showingResult,\n        setShowingResult,\n        save,\n        ac,\n        help,\n    }) => {\n    const toggleShowingResult = () => {\n        setShowingResult(!showingResult);\n    }\n    const handleKeyPress = (keyID) => {\n        if(keyID === \"AC\"){\n            ac();\n        }\n        else if(keyID === \"+/-\"){\n            let manipulatedFloat = parseFloat(content);\n            manipulatedFloat = -1 * manipulatedFloat;\n            if(isNaN(manipulatedFloat)){return;}\n            updateContent(manipulatedFloat.toString());\n        }\n        else if(keyID === \"%\"){\n            let manipulatedFloat = parseFloat(content);\n            manipulatedFloat = manipulatedFloat / 100.0;\n            if(isNaN(manipulatedFloat)){return;}\n            updateContent(manipulatedFloat.toString());\n        }\n        else if(\"/*+-=\".includes(keyID)){\n            save(keyID);\n        }\n        else if(\"0123456789\".includes(keyID)){\n            let manipulatedContent = content;\n            if(!showingResult){\n                if((parseFloat(manipulatedContent) === 0) && (!(manipulatedContent.includes(\".\")))){\n                    manipulatedContent = keyID;\n                }\n                else{\n                    manipulatedContent += keyID;\n                }\n            }\n            else{\n                manipulatedContent = keyID;\n                toggleShowingResult();\n            }\n            updateContent(manipulatedContent);\n        }\n        else if(keyID === \".\"){\n            let manipulatedContent = content;\n            if((manipulatedContent === \"\") || (manipulatedContent.includes(\".\")) || showingResult){\n                return;\n            }\n            manipulatedContent += \".\";\n            updateContent(manipulatedContent);\n        }\n        else if(keyID === \"?\"){\n            help();\n        }\n        else{\n            //error\n            console.log(\"ERROR: incorrect input to Keypad handleKeyPress(keyID)\");\n        }\n    };\n    return(\n        <Grid container>\n            <Grid container item xs={12}>\n                <Button onClick={() => handleKeyPress(\"AC\")} color=\"secondary\">AC </Button>\n                <Button onClick={() => handleKeyPress(\"+/-\")} color=\"primary\">+/-</Button>\n                <Button onClick={() => handleKeyPress(\"%\")} color=\"primary\"> % </Button>\n                <Button onClick={() => handleKeyPress(\"/\")} color=\"primary\"> ÷ </Button>\n            </Grid>\n            <Grid container item xs={12}>\n                <Button onClick={() => handleKeyPress(\"7\")} color=\"primary\"> 7 </Button>\n                <Button onClick={() => handleKeyPress(\"8\")} color=\"primary\"> 8 </Button>\n                <Button onClick={() => handleKeyPress(\"9\")} color=\"primary\"> 9 </Button>\n                <Button onClick={() => handleKeyPress(\"*\")} color=\"primary\"> × </Button>\n            </Grid>\n            <Grid container item xs={12}>\n                <Button onClick={() => handleKeyPress(\"4\")} color=\"primary\"> 4 </Button>\n                <Button onClick={() => handleKeyPress(\"5\")} color=\"primary\"> 5 </Button>\n                <Button onClick={() => handleKeyPress(\"6\")} color=\"primary\"> 6 </Button>\n                <Button onClick={() => handleKeyPress(\"-\")} color=\"primary\"> − </Button>\n            </Grid>\n            <Grid container item xs={12}>\n                <Button onClick={() => handleKeyPress(\"1\")} color=\"primary\"> 1 </Button>\n                <Button onClick={() => handleKeyPress(\"2\")} color=\"primary\"> 2 </Button>\n                <Button onClick={() => handleKeyPress(\"3\")} color=\"primary\"> 3 </Button>\n                <Button onClick={() => handleKeyPress(\"+\")} color=\"primary\"> + </Button>\n            </Grid>\n            <Grid container item xs={12}>\n                <Button onClick={() => handleKeyPress(\"0\")} color=\"primary\"> 0 </Button>\n                <Button onClick={() => handleKeyPress(\".\")} color=\"primary\"> . </Button>\n                <Button onClick={() => handleKeyPress(\"=\")} color=\"primary\"> = </Button>\n                <Button onClick={() => handleKeyPress(\"?\")} color=\"default\"> ? </Button>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default Keypad;","import React from 'react';\nimport { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Display from './Display';\nimport Keypad from './Keypad';\n\nconst ReactCalculator = ({}) => {\n    const [displayContent, setDisplayContent] = useState(\"\");\n    const [calculation, setCalculation] = useState({\n        \"firstNumber\": NaN,\n        \"operator\": \"\",\n        \"secondNumber\": NaN,\n        \"result\": NaN\n    });\n    const [showingResult, setShowingResult] = useState(false);\n    const calculate = () => {\n        try{\n            let result = NaN;\n            if(calculation[\"operator\"] === \"-\"){\n                result = calculation[\"firstNumber\"] - calculation[\"secondNumber\"];\n            }\n            else if(calculation[\"operator\"] === \"/\"){\n                result = calculation[\"firstNumber\"] / calculation[\"secondNumber\"];\n            }\n            else if(calculation[\"operator\"] === \"*\"){\n                result = calculation[\"firstNumber\"] * calculation[\"secondNumber\"];\n            }\n            else if(calculation[\"operator\"] === \"+\"){\n                result = calculation[\"firstNumber\"] + calculation[\"secondNumber\"];\n            }\n            else{\n                console.log(\"calculation error\");\n            }\n            let newCalculation = calculation;\n            newCalculation[\"result\"] = result;\n            setCalculation(newCalculation);\n            if(!(isNaN(result))){\n                setDisplayContent(result.toString());\n            }\n            setCalculation({\n                \"firstNumber\": NaN,\n                \"operator\": \"\",\n                \"secondNumber\": NaN,\n                \"result\": NaN\n            });\n        }\n        catch(e){console.log(e);}\n    }\n    const save = (operator) => {\n        if(isNaN(calculation[\"firstNumber\"])){\n            calculation[\"firstNumber\"] = parseFloat(displayContent);\n            calculation[\"operator\"] = operator;\n            setShowingResult(true);\n            return;\n        }\n        else if(isNaN(calculation[\"secondNumber\"])){\n            calculation[\"secondNumber\"] = parseFloat(displayContent);\n            setShowingResult(true);\n            calculate();\n            return;\n        }\n        else{\n            calculate();\n        }\n    }\n    const help = () => {\n        alert(\"React Calculator is made by Shrey Ravi. Visit the GitHub at https://github.com/ShreyRavi/react-calculator.\");\n    }\n    return(\n        <div className=\"ReactCalculator\">\n            <Grid\n                container\n                direction=\"column\"\n                justify=\"flex-start\"\n                alignItems=\"flex-start\">\n                <Grid item xs>\n                    <Display content={displayContent}></Display>\n                </Grid>\n                <Grid item xs>\n                    <Keypad content={displayContent} \n                    updateContent={setDisplayContent}\n                    save={save}\n                    ac={() => {setDisplayContent(\"\"); {setCalculation({\n                        \"firstNumber\": NaN,\n                        \"operator\": \"\",\n                        \"secondNumber\": NaN,\n                        \"result\": NaN\n                    })};}}\n                    showingResult={showingResult}\n                    setShowingResult={setShowingResult}\n                    help={help}></Keypad>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nexport default ReactCalculator;","import React from 'react';\nimport ReactCalculator from './components/ReactCalculator';\n\nconst App = () => {\n  return (\n    <ReactCalculator></ReactCalculator>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}